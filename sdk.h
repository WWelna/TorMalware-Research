/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 *                                  Pinger V1
 * =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 * Copyright (C) 2011, William H. Welna All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY William H. Welna ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL William H. Welna BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 */

#ifndef __SDK__H__
#define __SDK__H__
#include "pstdint.h"

typedef struct {
	uint8_t s[255];
	uint8_t i, j;
	uint8_t key[16];
} RC4_KEY;

typedef struct {
	void (*ksa)(RC4_KEY *, const char *, int);
	void (*crypt)(RC4_KEY *, char *, int);
	void (*prng)(RC4_KEY *);
	void (*drop)(RC4_KEY *, int);
	int (*generate)(RC4_KEY *);
} rc4_export;

typedef struct {
	int (*connect)(RC4_KEY *, uint32_t *, int);
	int (*listen)(RC4_KEY *, uint32_t *, int);
	int (*send)(RC4_KEY *, int, char *, int);
	char *(*recv)(RC4_KEY *, int, char *, int *);
	int (*printf)(RC4_KEY *, int, char *, ...);
} crypt_socks_export;

typedef struct {
	void (*xxtea)(uint32_t *, int, uint32_t *);
	uint32_t (*char2uint32)(char *);
	uint32_t *keys;
} tea_export;

typedef struct {
	void *(*find)(char *, int, char *, int);
	int (*cmp)(char *, char *, int);
	int (*len)(char *);
	void (*cpy)(char *, char *, int);
	void (*zero)(char *, int);
	void (*cat)(char *, char *);
} utils_export;

typedef struct {
	int (*connect)(char *, char*);
	int (*listen)(char *, char *, int, int, int);
	int (*close)(int);
	int (*send)(int, char *, int);
	int (*recv)(int, char *, int);
	int (*socks5)(char *, char *, char *, char *);
} socks_export;

typedef struct {
	rc4_export *rc4;
	crypt_socks_export *crypt_socks;
	tea_export *tea;
	utils_export *utils;
	socks_export *socks;
} export_table;

#endif
